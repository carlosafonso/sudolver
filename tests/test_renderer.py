from context import sudolver
import unittest


class TestRenderer(unittest.TestCase):

    def setUp(self):
        self.renderer = sudolver.Renderer()

    def test_render(self):
        """render should return a pretty-printed representation of the
        puzzle"""
        self.maxDiff = None
        sudoku = sudolver.Sudoku([2, 9, 5, 7, 4, 3, 8, 6, 1, 4, 3, 1, 8, 6, 5, 9, 2, 7, 8, 7, 6, 1, 9, 2, 5, 4, 3, 3, 8, 7, 4, 5, 9, 2, 1, 6, 6, 1, 2, 3, 8, 7, 4, 9, 5, 5, 4, 9, 2, 1, 6, 7, 3, 8, 7, 6, 3, 5, 3, 4, 1, 8, 9, 9, 2, 8, 6, 7, 1, 3, 5, 4, 1, 5, 4, 9, 3, 8, 6, 7, 2])
        expected = "╔═══════════════════════════════════╗\n║ 2 │ 9 │ 5 ║ 7 │ 4 │ 3 ║ 8 │ 6 │ 1 ║\n║───────────║───────────║───────────║\n║ 4 │ 3 │ 1 ║ 8 │ 6 │ 5 ║ 9 │ 2 │ 7 ║\n║───────────║───────────║───────────║\n║ 8 │ 7 │ 6 ║ 1 │ 9 │ 2 ║ 5 │ 4 │ 3 ║\n╠═══════════╬═══════════╬═══════════╣\n║ 3 │ 8 │ 7 ║ 4 │ 5 │ 9 ║ 2 │ 1 │ 6 ║\n║───────────║───────────║───────────║\n║ 6 │ 1 │ 2 ║ 3 │ 8 │ 7 ║ 4 │ 9 │ 5 ║\n║───────────║───────────║───────────║\n║ 5 │ 4 │ 9 ║ 2 │ 1 │ 6 ║ 7 │ 3 │ 8 ║\n╠═══════════╬═══════════╬═══════════╣\n║ 7 │ 6 │ 3 ║ 5 │ 3 │ 4 ║ 1 │ 8 │ 9 ║\n║───────────║───────────║───────────║\n║ 9 │ 2 │ 8 ║ 6 │ 7 │ 1 ║ 3 │ 5 │ 4 ║\n║───────────║───────────║───────────║\n║ 1 │ 5 │ 4 ║ 9 │ 3 │ 8 ║ 6 │ 7 │ 2 ║\n╚═══════════════════════════════════╝"

        self.assertEqual(expected, self.renderer.render(sudoku))

    def test_render_with_empties(self):
        """render should render empty cells as empty spaces """
        self.maxDiff = None
        sudoku = sudolver.Sudoku([None, 9, 5, 7, None, 3, 8, 6, 1, 4, 3, None, 8, 6, 5, 9, 2, 7, 8, 7, 6, 1, 9, 2, 5, 4, 3, 3, 8, 7, 4, 5, 9, 2, 1, 6, 6, 1, 2, 3, 8, 7, 4, 9, 5, 5, 4, 9, 2, 1, 6, 7, 3, 8, 7, 6, 3, 5, 3, 4, 1, 8, 9, 9, 2, 8, 6, 7, 1, 3, 5, 4, 1, 5, 4, 9, 3, 8, 6, 7, 2])
        expected = "╔═══════════════════════════════════╗\n║   │ 9 │ 5 ║ 7 │   │ 3 ║ 8 │ 6 │ 1 ║\n║───────────║───────────║───────────║\n║ 4 │ 3 │   ║ 8 │ 6 │ 5 ║ 9 │ 2 │ 7 ║\n║───────────║───────────║───────────║\n║ 8 │ 7 │ 6 ║ 1 │ 9 │ 2 ║ 5 │ 4 │ 3 ║\n╠═══════════╬═══════════╬═══════════╣\n║ 3 │ 8 │ 7 ║ 4 │ 5 │ 9 ║ 2 │ 1 │ 6 ║\n║───────────║───────────║───────────║\n║ 6 │ 1 │ 2 ║ 3 │ 8 │ 7 ║ 4 │ 9 │ 5 ║\n║───────────║───────────║───────────║\n║ 5 │ 4 │ 9 ║ 2 │ 1 │ 6 ║ 7 │ 3 │ 8 ║\n╠═══════════╬═══════════╬═══════════╣\n║ 7 │ 6 │ 3 ║ 5 │ 3 │ 4 ║ 1 │ 8 │ 9 ║\n║───────────║───────────║───────────║\n║ 9 │ 2 │ 8 ║ 6 │ 7 │ 1 ║ 3 │ 5 │ 4 ║\n║───────────║───────────║───────────║\n║ 1 │ 5 │ 4 ║ 9 │ 3 │ 8 ║ 6 │ 7 │ 2 ║\n╚═══════════════════════════════════╝"

        self.assertEqual(expected, self.renderer.render(sudoku))

if __name__ == '__main__':
    unittest.main()
